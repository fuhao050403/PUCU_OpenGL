#version 330 core

out vec4 FragColor;

#define NUM_OF_LAMP 3

in VS_OUT
{
	vec3 fragPos;
	vec3 normal;
	vec2 texCoord;
	vec4 fragPosLightSpace[NUM_OF_LAMP];
} fs_in;

struct Material
{
	sampler2D diffuse;
	float shininess;
};

struct Light
{
	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	vec3 lightPos;
};

uniform Material material;
uniform Light light[NUM_OF_LAMP];
uniform vec3 viewPos;

uniform sampler2D shadowMap[NUM_OF_LAMP];

float shadowCalculation(int index_light)
{
	vec3 projCoords = fs_in.fragPosLightSpace[index_light].xyz / fs_in.fragPosLightSpace[index_light].w;
	projCoords = projCoords * 0.5 + 0.5;

	float closestDepth = texture(shadowMap[index_light], projCoords.xy).r;
	float objectDepth = projCoords.z;

	vec3 norm = normalize(fs_in.normal);
	vec3 lightDir = normalize(light[index_light].lightPos - fs_in.fragPos);
	float bias = max(0.05 * (1.0 - dot(lightDir, norm)), 0.005);

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap[index_light], 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(shadowMap[index_light], projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += objectDepth - bias > pcfDepth ? 1.0 : 0.0;
		}
	}
	shadow /= 9.0f;

	if(projCoords.z > 1.0)
	{
		shadow = 0.0;
	}

	return shadow;
}

vec3 pointLightCalculation(int index_light)
{
	vec3 ambient = light[index_light].ambient * texture(material.diffuse, fs_in.texCoord).rgb;

	vec3 diffuse = vec3(0.0);
	vec3 specular = vec3(0.0);

	if(0.0 == shadowCalculation(index_light))
	{
		vec3 norm = normalize(fs_in.normal);
		vec3 lightDir = normalize(light[index_light].lightPos - fs_in.fragPos);
		float diff = max(dot(lightDir, norm), 0.0);
		diffuse = light[index_light].diffuse * diff * texture(material.diffuse, fs_in.texCoord).rgb;

		vec3 viewDir = normalize(viewPos - fs_in.fragPos);
		//blinn-phong
		vec3 halfwayDir = normalize(lightDir + viewDir);
		float spec = pow(max(dot(halfwayDir, norm), 0.0), material.shininess);
		specular = light[index_light].specular * spec * texture(material.diffuse, fs_in.texCoord).rgb;

		//Phong
		//vec3 reflectDir = reflect(-lightDir, norm);
		//float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
		//vec3 specular = light.specular * spec * texture(material.diffuse, texCoord).rgb;

		float distance = length(light[index_light].lightPos - fs_in.fragPos);
		float attenuation = 1.0 / (light[index_light].constant + light[index_light].linear * distance + light[index_light].quadratic * (distance * distance));

		ambient *= attenuation;
		diffuse *= attenuation;
		specular *= attenuation;
	}

	return (ambient + diffuse + specular);
}

void main()
{
	vec3 result;
	for(int i = 0; i < NUM_OF_LAMP; i++)
	{
		result += pointLightCalculation(i);
	}
	FragColor = vec4(result, 1.0);
}