#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

#define NUM_OF_LAMP 3

out VS_OUT
{
	vec3 fragPos;
	vec3 normal;
	vec2 texCoord;
	vec4 fragPosLightSpace[NUM_OF_LAMP];
} vs_out;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform mat4 lightSpaceMatrix[NUM_OF_LAMP];

void main()
{
	gl_Position = projection * view * model * vec4(aPos, 1.0);

	vs_out.fragPos = vec3(model * vec4(aPos, 1.0));
	vs_out.normal = transpose(inverse(mat3(model))) * aNormal;
	vs_out.texCoord = aTexCoord;

	for(int i = 0; i < NUM_OF_LAMP; i++)
	{
		vs_out.fragPosLightSpace[i] = lightSpaceMatrix[i] * vec4(vs_out.fragPos, 1.0);
	}
}